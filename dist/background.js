chrome.commands.onCommand.addListener(async e=>{if("generate-reply"===e)try{const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});e&&e.id&&chrome.tabs.sendMessage(e.id,{type:"trigger-generate-reply"})}catch(e){}});async function e(){try{const e=await fetch("https://shahid429.github.io/tahzeeb-config/config.json");if(!e.ok)throw new Error("Failed to fetch config");const t=await e.json();await o({extensionConfig:t})}catch(e){console.error("Config fetch failed:",e),await o({extensionConfig:{enabled:!0,password:"",announcement:"",alert:"",message:""}})}}function t(e){if(!e)return!1;const t=e.toLowerCase();return t.includes("overloaded")||t.includes("rate limit")||t.includes("too many requests")||t.includes("quota")||t.includes("temporarily unavailable")||t.includes("unavailable")||t.includes("try again later")}function n(e){return new Promise(t=>{try{chrome.storage.local.get(e,e=>t(e||{}))}catch{t({})}})}function o(e){try{chrome.storage.local.set(e)}catch{}}async function a(e,t,n=8e3){const o=new AbortController,a=setTimeout(()=>o.abort(),n);try{return await fetch(e,{...t,signal:o.signal})}finally{clearTimeout(a)}}async function s(e,t,n,o){const s=`https://generativelanguage.googleapis.com/v1beta/models/${encodeURIComponent(t)}:generateContent?key=${e}`,r=await a(s,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:n},{text:o}]}],generationConfig:{temperature:.7,maxOutputTokens:60,topP:.8,topK:40}})});if(!r.ok){let e=`HTTP ${r.status}`;try{const t=await r.json();e=t.error?.message||e}catch{}throw new Error(e)}const i=await r.json();return i.candidates?.[0]?.content?.parts?.[0]?.text?.trim()||""}async function r(e,t,n,o){const s=await a("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({model:t,temperature:.7,max_tokens:60,messages:[{role:"system",content:n},{role:"user",content:o}]})});if(!s.ok){let e=`HTTP ${s.status}`;try{const t=await s.json();e=t.error?.message||e}catch{}throw new Error(e)}const r=await s.json();return r.choices?.[0]?.message?.content?.trim()||""}async function i(e,t,n,o){const s=await a("https://api.perplexity.ai/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({model:t,temperature:.7,max_tokens:60,messages:[{role:"system",content:n},{role:"user",content:o}]})});if(!s.ok){let e=`HTTP ${s.status}`;try{const t=await s.json();e=t.error?.message||e}catch{}throw new Error(e)}const r=await s.json();return r.choices?.[0]?.message?.content?.trim()||""}async function l(e,t,a){try{console.log("Tracking reply:",t,a,e.substring(0,30)+"...");const s=await n(["dashboardStats","replyHistory"]),r=s.dashboardStats||{dailyReplies:0,monthlyReplies:0,dailyTokens:0,monthlyTokens:0,lastUpdated:Date.now()},i=s.replyHistory||[],l=Date.now(),c=new Date,y=new Date(r.lastUpdated);y.toDateString()!==c.toDateString()&&(r.dailyReplies=0,r.dailyTokens=0),y.getMonth()===c.getMonth()&&y.getFullYear()===c.getFullYear()||(r.monthlyReplies=0,r.monthlyTokens=0);const g=Math.ceil(e.length/4);r.dailyReplies+=1,r.monthlyReplies+=1,r.dailyTokens+=g,r.monthlyTokens+=g,r.lastUpdated=l;const d={id:Date.now().toString(),content:e,timestamp:l,model:`${t}/${a}`,tokens:g};i.push(d),i.length>100&&i.shift(),await o({dashboardStats:r,replyHistory:i}),console.log("Reply tracked successfully")}catch(e){console.error("Failed to track reply generation:",e)}}chrome.runtime.onStartup.addListener(e),chrome.runtime.onInstalled.addListener(e);try{globalThis.testTracking=async function(){console.log("Testing reply tracking (background)..."),await l("This is a test reply generated by the AI system.","gemini","gemini-2.5-flash-lite"),console.log("Test tracking (background) completed")}}catch(e){}chrome.runtime.onMessage.addListener((e,a,c)=>{if(console.log("BG: onMessage received",e,{sender:a}),e&&e.type)return"test-tracking"===e.type?((async()=>{try{await l("Test reply from dashboard","gemini","gemini-2.5-flash-lite"),console.log("BG: test-tracking completed, sending response"),c({success:!0})}catch(e){console.error("BG: test-tracking error",e),c({error:e?.message||String(e)})}})(),!0):"gen"===e.type?((async()=>{try{console.log("BG: handling gen request");const{systemInstruction:y,prompt:g}=e.payload||{},d=await(a=["geminiApiKeys","openaiApiKeys","perplexityApiKeys","geminiModel","openaiModel","perplexityModel"],new Promise(e=>{try{chrome.storage.sync.get(a,t=>e(t||{}))}catch{e({})}})),m=Array.isArray(d.geminiApiKeys)?d.geminiApiKeys:[],p=Array.isArray(d.openaiApiKeys)?d.openaiApiKeys:[],h=Array.isArray(d.perplexityApiKeys)?d.perplexityApiKeys:[];if(!m.length&&!p.length&&!h.length)throw new Error("No API keys configured");const u=d.geminiModel||"gemini-2.5-flash-lite",f=d.openaiModel||"gpt-4o-mini",w=d.perplexityModel||"sonar",k=await n(["lastWorkingProvider","lastWorkingKey"]),T=[{name:"gemini",keys:m,model:u,fn:s},{name:"openai",keys:p,model:f,fn:r},{name:"perplexity",keys:h,model:w,fn:i}].filter(e=>e.keys.length);if(k.lastWorkingProvider&&k.lastWorkingKey){const e=T.findIndex(e=>e.name===k.lastWorkingProvider&&e.keys.includes(k.lastWorkingKey));e>0&&T.unshift(T.splice(e,1)[0])}let b;for(const e of T)for(let n=0;n<e.keys.length;n++){const a=e.keys[n];try{const t=await e.fn(a,e.model,y,g);if(t&&t.trim().length)return o({lastWorkingProvider:e.name,lastWorkingKey:a}),await l(t,e.name,e.model),console.log("BG: generation succeeded, sending response"),void c({text:t})}catch(e){b=e,t(e?.message)&&await new Promise(e=>setTimeout(e,250+200*n));continue}}throw new Error(b?.message||"All providers failed")}catch(e){c({error:e?.message||"Generation failed"})}var a})(),!0):void 0});