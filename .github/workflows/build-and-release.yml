name: Build and Release X Reply AI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}
  release:
    types: [created]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build extension
        run: npm run prod

      - name: Verify build
        run: |
          ls -la dist/
          if [ ! -f "dist/manifest.json" ]; then
            echo "Build failed: manifest.json not found"
            exit 1
          fi
          if [ ! -f "dist/background.js" ]; then
            echo "Build failed: background.js not found"
            exit 1
          fi

      - name: Create release archive
        run: |
          mkdir -p release
          cd dist
          # Use different naming based on event type
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="latest-${{ github.sha }}"
          fi
          zip -r ../release/X-Reply-AI-v${VERSION}.zip .
          cd ..
          ls -la release/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: x-reply-ai-extension-${{ github.sha }}
          path: dist/
          retention-days: 30

      - name: Upload release archive
        uses: actions/upload-artifact@v4
        with:
          name: x-reply-ai-archive-${{ github.sha }}
          path: release/
          retention-days: 30

      - name: Commit release to repo folder
        if: github.event_name != 'pull_request'
        run: |
          # Create releases folder if it doesn't exist
          mkdir -p releases
          
          # Copy the archive to releases folder
          cp release/*.zip releases/
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit the release file
          git add releases/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add extension release: $(ls releases/*.zip | head -1 | xargs basename)"
            git push
          fi

      - name: Upload release archive (tagged)
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: x-reply-ai-release-${{ github.event.release.tag_name }}
          path: release/
          retention-days: 90

      - name: Upload release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: release/X-Reply-AI-v${{ github.event.release.tag_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}