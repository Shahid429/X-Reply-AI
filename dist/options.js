function e(){const e=document.getElementById("notification");e&&(e.style.display="none")}function t(){const e=document.getElementById("geminiKeys"),t=document.getElementById("openaiKeys"),n=document.getElementById("perplexityKeys"),o=document.getElementById("geminiModel"),i=document.getElementById("openaiModel"),s=document.getElementById("perplexityModel"),r=document.getElementById("save"),l=document.getElementById("status"),a=document.getElementById("helpLink"),c=document.getElementById("persona"),d=document.getElementById("preset");function m(e){return e.split(/\r?\n/).map(e=>e.trim()).filter(e=>e.length>0)}function p(e){return(e||[]).join("\n")}chrome.storage.sync.get(["geminiApiKeys","openaiApiKeys","perplexityApiKeys","geminiModel","openaiModel","perplexityModel","personaPrompt","promptPreset"],function(r){e&&(e.value=p(r.geminiApiKeys)),t&&(t.value=p(r.openaiApiKeys)),n&&(n.value=p(r.perplexityApiKeys)),r.geminiModel&&o&&(o.value=r.geminiModel),r.openaiModel&&i&&(i.value=r.openaiModel),r.perplexityModel&&s&&(s.value=r.perplexityModel),r.personaPrompt&&c&&(c.value=r.personaPrompt),r.promptPreset&&d&&(d.value=r.promptPreset),g("Settings loaded successfully.","success")}),r.addEventListener("click",function(){const r=e?m(e.value):[],l=t?m(t.value):[],a=n?m(n.value):[],p=o?o.value:"gemini-2.5-flash-lite",u=i?i.value:"gpt-4o-mini",y=s?s.value:"sonar",h=c?c.value.trim():"",f=d?d.value:"prompt2";if(0===r.length&&0===l.length&&0===a.length)return void g("Please enter at least one API key (Gemini, OpenAI, or Perplexity).","error");const v=r.some(e=>!e.startsWith("AIzaSy")||e.length<30),E=l.some(e=>!/^sk-/.test(e)),w=a.some(e=>!/^pplx-/.test(e));v?g("One or more Gemini keys look invalid.","error"):E?g("One or more OpenAI keys look invalid.","error"):w?g("One or more Perplexity keys look invalid.","error"):chrome.storage.sync.set({geminiApiKeys:r,openaiApiKeys:l,perplexityApiKeys:a,geminiModel:p,openaiModel:u,perplexityModel:y,personaPrompt:h,promptPreset:f},function(){chrome.runtime.lastError?g("Error saving settings: "+chrome.runtime.lastError.message,"error"):g("Settings saved successfully!","success")})});const u=document.querySelectorAll(".tab"),y=document.querySelectorAll(".tab-pane");function g(e,t="info"){l.textContent=e,l.className="",l.classList.add(t),l.style.display="block",clearTimeout(window.statusTimeout),window.statusTimeout=setTimeout(()=>{l.style.display="none"},5e3)}u.forEach(e=>{e.addEventListener("click",()=>{u.forEach(e=>e.classList.remove("active")),e.classList.add("active"),y.forEach(e=>e.classList.remove("active"));const t=e.dataset.tab+"-tab";document.getElementById(t).classList.add("active")})}),chrome.storage.sync.get(["geminiApiKeys","openaiApiKeys","perplexityApiKeys"],function(e){const t=e.geminiApiKeys&&e.geminiApiKeys.length>0,n=e.openaiApiKeys&&e.openaiApiKeys.length>0,o=e.perplexityApiKeys&&e.perplexityApiKeys.length>0,i=document.getElementById("apiStatus");t||n||o?(i.textContent="API keys configured",i.style.color="var(--success-color)"):(i.textContent="No API keys configured",i.style.color="var(--error-color)")}),chrome.storage.sync.get(["geminiModel","openaiModel","persona"],function(e){const t=document.getElementById("configStatus"),n=e.geminiModel||e.openaiModel,o=e.persona&&e.persona.trim().length>0;n&&o?(t.textContent="Fully configured",t.style.color="var(--success-color)"):n?(t.textContent="Model configured, persona optional",t.style.color="var(--warning-color)"):(t.textContent="Basic configuration needed",t.style.color="var(--text-secondary)")}),a.addEventListener("click",function(e){e.preventDefault(),chrome.tabs.create({url:"https://ai.google.dev/gemini-api/docs",active:!0})})}document.addEventListener("DOMContentLoaded",function(){const n=document.getElementById("notification-close");n&&n.addEventListener("click",e),async function(){try{const t=await fetch("https://shahid429.github.io/tahzeeb-config/config.json"),n=await t.json();if(!n.enabled)throw document.body.innerHTML="<h2>Extension Disabled</h2>",new Error("Extension disabled");if(n.announcement){(await new Promise(e=>chrome.storage.local.get("shownAnnouncements",e))).shownAnnouncements;!function(t){const n=document.getElementById("notification"),o=document.getElementById("notification-text");n&&o&&(o.textContent=t,n.style.display="block",setTimeout(()=>{e()},8e3))}(n.announcement)}n.alert&&console.warn(n.alert);if((await new Promise(e=>chrome.storage.local.get("enteredPassword",e))).enteredPassword!==n.password){const e=prompt(n.message||"Enter password:");if(e!==n.password)throw document.body.innerHTML="<h2>Extension Locked</h2>",new Error("Password incorrect");await new Promise(t=>chrome.storage.local.set({enteredPassword:e},t))}}catch(e){throw console.error("Failed to fetch config:",e),e}}().then(()=>{t()}).catch(e=>{console.error("Config check failed:",e),t()})});