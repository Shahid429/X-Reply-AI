name: Build and Release X Reply AI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing to repository
    outputs:
      extension-name: ${{ steps.create-archive.outputs.extension-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For releases, checkout the main branch instead of detached HEAD
          ref: ${{ github.event_name == 'release' && 'main' || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build extension
        run: npm run prod

      - name: Verify build
        run: |
          ls -la dist/
          if [ ! -f "dist/manifest.json" ]; then
            echo "Build failed: manifest.json not found"
            exit 1
          fi
          if [ ! -f "dist/background.js" ]; then
            echo "Build failed: background.js not found"
            exit 1
          fi
      - name: Create release archive
        id: create-archive
        run: |
          mkdir -p release
          cd dist
          
          echo "Current directory: $(pwd)"
          echo "Files in dist: $(ls -la)"
          
          # Determine version based on trigger type
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "GITHUB_SHA: $GITHUB_SHA"
          
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # For tags: use tag name (remove 'v' prefix if present)
            TAG_NAME="${GITHUB_REF_NAME}"
            VERSION="${TAG_NAME#v}"  # Remove 'v' prefix
            echo "Building for tag: $TAG_NAME -> version: $VERSION"
          else
            # For pushes: use date and short commit hash
            VERSION="$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
            echo "Building for push: version $VERSION"
          fi
          
          EXTENSION_NAME="X-Reply-AI-Extension-v${VERSION}.zip"
          echo "Creating extension: $EXTENSION_NAME"
          
          # Check if zip command exists
          which zip || echo "zip command not found"
          
          zip -r "../release/${EXTENSION_NAME}" .
          ZIP_RESULT=$?
          echo "Zip command exit code: $ZIP_RESULT"
          
          cd ..
          
          echo "Created extension: ${EXTENSION_NAME}"
          echo "extension-name=${EXTENSION_NAME}" >> $GITHUB_OUTPUT
          ls -la release/
      - name: Upload extension archive
        uses: actions/upload-artifact@v4
        with:
          name: x-reply-ai-extension
          path: release/
          retention-days: 30

      - name: Commit release to repo folder
        if: github.event_name != 'pull_request'
        run: |
          # Create releases folder if it doesn't exist
          mkdir -p releases
          
          # Clean up old releases (keep only the latest)
          cd releases
          rm -f *.zip
          cd ..
          
          # Copy the new archive to releases folder
          cp release/*.zip releases/
          
          # Configure git
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Add and commit the release file
          git add releases/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            NEW_FILE=$(ls releases/*.zip | head -1 | xargs basename)
            git commit -m "ðŸ¤– Add extension release: ${NEW_FILE}" || echo "Commit failed, possibly due to conflicts"
            git push origin main || echo "Push failed, but build artifacts are still available"
          fi
  # New job for creating GitHub releases
  create-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow creating releases
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download extension archive
        uses: actions/download-artifact@v4
        with:
          name: x-reply-ai-extension
          path: release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            ## ðŸ¤– X Reply AI Extension - ${{ github.ref_name }}
            
            **Automatic release created from commit:** `${{ github.sha }}`
            
            ### ðŸ“¦ Downloads
            - **Extension ZIP**: Download the attached `X-Reply-AI-Extension-v${{ github.ref_name }}.zip` file
            - **Install**: Unzip and load as unpacked extension in Chrome Developer Mode
            
            ### ðŸ”§ Build Details
            - **Commit**: ${{ github.sha }}
            - **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            - **Workflow**: ${{ github.workflow }}
            
            ---
            *This release was automatically created by GitHub Actions.*
          files: release/X-Reply-AI-Extension-v${{ github.ref_name }}.zip
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}