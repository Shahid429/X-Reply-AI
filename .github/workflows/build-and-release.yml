name: Build and Release X Reply AI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build extension
        run: npm run prod

      - name: Verify build
        run: |
          ls -la dist/
          if [ ! -f "dist/manifest.json" ]; then
            echo "Build failed: manifest.json not found"
            exit 1
          fi
          if [ ! -f "dist/background.js" ]; then
            echo "Build failed: background.js not found"
            exit 1
          fi

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run prod

      - name: Create release archive
        run: |
          mkdir -p release
          cd dist

          # Get version from tag (remove 'v' prefix)
          VERSION="${GITHUB_REF_NAME#v}"
          ZIP_NAME="X-Reply-AI-Extension-v${VERSION}.zip"

          echo "Creating: $ZIP_NAME"
          zip -r "../release/$ZIP_NAME" .
          cd ..

          echo "Created: $ZIP_NAME"
          ls -la release/

      - name: Commit to releases folder
        run: |
          mkdir -p releases

          # Clean up old releases (keep only latest)
          cd releases
          rm -f *.zip
          cd ..

          # Copy new release
          cp release/*.zip releases/

          # Commit
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Fetch main branch to handle detached HEAD
          git fetch origin main
          
          git add releases/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            NEW_FILE=$(ls releases/*.zip | head -1 | xargs basename)
            git commit -m "ðŸ¤– Add extension release: $NEW_FILE"
            git push origin main:main
          fi

      - name: Create GitHub Release
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          ZIP_FILE="release/X-Reply-AI-Extension-v${VERSION}.zip"

          # Create release notes
          cat << EOF > release_notes.md
          ## ðŸ¤– X Reply AI Extension - ${GITHUB_REF_NAME}

          **Automatic release created from commit:** \`${GITHUB_SHA}\`

          ### ðŸ“¦ Downloads
          - **Extension ZIP**: Download the attached \`X-Reply-AI-Extension-v${VERSION}.zip\` file
          - **Install**: Unzip and load as unpacked extension in Chrome Developer Mode

          ### ðŸ”§ Build Details
          - **Commit**: ${GITHUB_SHA}
          - **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          - **Workflow**: ${GITHUB_WORKFLOW}

          ---
          *This release was automatically created by GitHub Actions.*
          EOF

          # Create release
          gh release create "${GITHUB_REF_NAME}" \
            --title "Release ${GITHUB_REF_NAME}" \
            --notes-file release_notes.md \
            "$ZIP_FILE"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}